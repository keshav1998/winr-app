# Project Rules

## Overview

Web app for wINR on Sepolia with thirdweb v5 and a Uniswap v4 pool+hook. Built with Next.js App Router, TypeScript, and Tailwind CSS. thirdweb handles wallet + ERC-20 interactions; Uniswap v4 handles swaps with a custom Hook attached to the pool.

## Languages
	•	TypeScript for the frontend and server routes. Viem requires TS ≥ 5.x.
	•	Solidity for token, pool hook, and deployment scripts (lives in a separate repo or contracts folder if included).

## Tooling, Frameworks, and Key Libraries
	•	Framework: Next.js (App Router). Use Server Components where practical.
	•	UI/Styling: Tailwind CSS. Official Next.js guide used for setup.
	•	Web3 SDK: thirdweb React SDK v5 for providers, hooks, and type-safe contract calls + extensions.
	•	EVM Client: viem for PoolManager and low-level Uniswap v4 calls.
	•	DEX: Uniswap v4 PoolManager + Hooks. Hook specified at pool creation via PoolManager.initialize.
	•	Package Manager: npm. Project and package names must be lowercase.
	•	Linter/Formatter: Biome (selected at scaffold).
	•	Deployment: Vercel for CI/CD and hosting.

## Project Structure (frontend)

app/
  layout.tsx                # ThirdwebProvider wrapper, theming
  page.tsx                  # Dashboard: balances + status chips
  deposit/page.tsx          # Start KYC, create deposit intent
  mint/page.tsx             # Mint wINR after backend confirms
  swap/page.tsx             # v4 swap UI (viem → PoolManager)
  redeem/page.tsx           # Burn & redemption request
  admin/page.tsx            # Roles, allow/blacklist, airdrop

  api/
    kyc/route.ts            # POST/GET KYC status
    deposit/route.ts        # Create deposit intent
    confirm/route.ts        # CBDC webhook to confirm deposit
    mint/route.ts           # Server-side mint (thirdweb v5)
    redeem/route.ts         # Server-side burnFrom
    airdrop/route.ts        # CSV-based airdrop dispatch

lib/
  thirdweb.ts               # thirdweb v5 client + wINR contract getter
  v4.ts                     # PoolManager ABI + viem helpers
  db.ts                     # DB client if used (e.g., Postgres/Turso)

components/
  WalletConnect.tsx         # ConnectButton/headless account UI
  KycGate.tsx               # Gated wrapper for approved users
  SwapWidget.tsx            # From/To, allowance, swap submit
  AdminTables.tsx           # Lists + CSV uploader

styles/
  globals.css               # Tailwind base + design tokens

# Contracts (reference)
	•	Token: thirdweb Token (ERC-20) on Sepolia. Interact via v5 extensions like mintTo/burnFrom.
	•	DEX: Uniswap v4 PoolManager + Hook attached to the wINR/WETH or wINR/USDC pool; hook enforces AML/KYC on beforeSwap / beforeModifyPosition.

# Environment Variables (Vercel → Project Settings)

NEXT_PUBLIC_CHAIN_ID=11155111
NEXT_PUBLIC_WINR_ADDRESS=0x...               # Token address
NEXT_PUBLIC_V4_POOLMANAGER=0x...             # Sepolia v4 PoolManager
NEXT_PUBLIC_V4_HOOK=0x...                    # Your deployed Hook
THIRDWEB_SECRET_KEY=...                      # thirdweb client key
MINTER_PRIVATE_KEY=...                       # server-only
DATABASE_URL=...                             # if using a DB

!!Note: Never expose private keys in NEXT_PUBLIC_*. Use server routes for privileged calls.!!

## Deployment & CI/CD
	•	Vercel auto-builds on each git push and provides Preview URLs per PR. First-class Next.js support.
	•	Build command: next build.
	•	API routes run on the Node.js runtime (not Edge) when secrets are required.

## Core Flows (frontend ↔ backend)
	1.	Connect: ThirdwebProvider + Connect UI; enforce Sepolia.
	2.	KYC Gate: UI checks /api/kyc before enabling actions.
	3.	Deposit → Mint:
	•	Backend records deposit intent → CBDC webhook confirms → /api/mint calls mintTo with thirdweb v5.
	4.	Swap:
	•	Approve PoolManager if needed → viem call to PoolManager.swap with pool key + hook data.
	5.	Redeem:
	•	User approve then server calls burnFrom and triggers off-chain payout.
	6.	Airdrop: CSV upload → server iterates transfers or uses thirdweb airdrop contract.

## Style Guide
	•	Naming: repo/package/project names lowercase and URL-safe.
	•	UI System: Tailwind utility classes; semantic tokens for primary/neutral/success/error; responsive first.
	•	Routing: App Router; use Server Components where possible; colocate route handlers in app/api/*.
	•	State & UX:
	•	Disable actions until prerequisites met (KYC, deposit).
	•	Use loading states for tx; toast notifications for success/error.
	•	Show on-chain links for tx hashes.
	•	Web3 Patterns:
	•	thirdweb v5 getContract + write extensions returning Transaction objects, then useSendTransaction in React or sendTransaction on server.
	•	For v4, isolate PoolManager + Hook logic in lib/v4.ts; never bake DEX logic into token contract.

## Security & Compliance
	•	Privileged writes (mint/burn/blacklist edits) execute only on server routes.
	•	Validate inputs with zod; sanitize CSV uploads.
	•	Enforce chain ID = Sepolia; prompt network switch if mismatched.
	•	Hooks must revert unauthorized swaps/liquidity ops; test with both allowed and blocked addresses.

## Useful Doc Links
	•	thirdweb React v5 docs and getting started.
	•	thirdweb v5 extensions usage.
	•	Uniswap v4 Hooks + PoolManager concepts.
	•	Tailwind with Next.js.
	•	Next.js App Router docs.
	•	Vercel → Next.js deployment guide.

⸻
